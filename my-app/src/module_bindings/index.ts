// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit 0712d3bfbd159367de09efeeeacb54c9d4f0ff61).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { AddPoints } from "./add_points_reducer.ts";
export { AddPoints };
import { AddTime } from "./add_time_reducer.ts";
export { AddTime };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { MarkOffline } from "./mark_offline_reducer.ts";
export { MarkOffline };
import { MarkOnline } from "./mark_online_reducer.ts";
export { MarkOnline };
import { UpdateGoal } from "./update_goal_reducer.ts";
export { UpdateGoal };

// Import and reexport all table handle types
import { PresenceTableHandle } from "./presence_table.ts";
export { PresenceTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { CategoryTime } from "./category_time_type.ts";
export { CategoryTime };
import { GoalAction } from "./goal_action_type.ts";
export { GoalAction };
import { Presence } from "./presence_type.ts";
export { Presence };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    presence: {
      tableName: "presence",
      rowType: Presence.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (Presence.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "userId",
      primaryKeyInfo: {
        colName: "userId",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    add_points: {
      reducerName: "add_points",
      argsType: AddPoints.getTypeScriptAlgebraicType(),
    },
    add_time: {
      reducerName: "add_time",
      argsType: AddTime.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    mark_offline: {
      reducerName: "mark_offline",
      argsType: MarkOffline.getTypeScriptAlgebraicType(),
    },
    mark_online: {
      reducerName: "mark_online",
      argsType: MarkOnline.getTypeScriptAlgebraicType(),
    },
    update_goal: {
      reducerName: "update_goal",
      argsType: UpdateGoal.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.5.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddPoints", args: AddPoints }
| { name: "AddTime", args: AddTime }
| { name: "ClientConnected", args: ClientConnected }
| { name: "MarkOffline", args: MarkOffline }
| { name: "MarkOnline", args: MarkOnline }
| { name: "UpdateGoal", args: UpdateGoal }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addPoints(userId: string) {
    const __args = { userId };
    let __writer = new __BinaryWriter(1024);
    AddPoints.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_points", __argsBuffer, this.setCallReducerFlags.addPointsFlags);
  }

  onAddPoints(callback: (ctx: ReducerEventContext, userId: string) => void) {
    this.connection.onReducer("add_points", callback);
  }

  removeOnAddPoints(callback: (ctx: ReducerEventContext, userId: string) => void) {
    this.connection.offReducer("add_points", callback);
  }

  addTime(userId: string, category: string, time: bigint) {
    const __args = { userId, category, time };
    let __writer = new __BinaryWriter(1024);
    AddTime.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_time", __argsBuffer, this.setCallReducerFlags.addTimeFlags);
  }

  onAddTime(callback: (ctx: ReducerEventContext, userId: string, category: string, time: bigint) => void) {
    this.connection.onReducer("add_time", callback);
  }

  removeOnAddTime(callback: (ctx: ReducerEventContext, userId: string, category: string, time: bigint) => void) {
    this.connection.offReducer("add_time", callback);
  }

  clientConnected(userId: string, email: string | undefined) {
    const __args = { userId, email };
    let __writer = new __BinaryWriter(1024);
    ClientConnected.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("client_connected", __argsBuffer, this.setCallReducerFlags.clientConnectedFlags);
  }

  onClientConnected(callback: (ctx: ReducerEventContext, userId: string, email: string | undefined) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext, userId: string, email: string | undefined) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onMarkOffline(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("mark_offline", callback);
  }

  removeOnMarkOffline(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("mark_offline", callback);
  }

  onMarkOnline(callback: (ctx: ReducerEventContext, userId: string) => void) {
    this.connection.onReducer("mark_online", callback);
  }

  removeOnMarkOnline(callback: (ctx: ReducerEventContext, userId: string) => void) {
    this.connection.offReducer("mark_online", callback);
  }

  updateGoal(userId: string, category: string, action: GoalAction) {
    const __args = { userId, category, action };
    let __writer = new __BinaryWriter(1024);
    UpdateGoal.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_goal", __argsBuffer, this.setCallReducerFlags.updateGoalFlags);
  }

  onUpdateGoal(callback: (ctx: ReducerEventContext, userId: string, category: string, action: GoalAction) => void) {
    this.connection.onReducer("update_goal", callback);
  }

  removeOnUpdateGoal(callback: (ctx: ReducerEventContext, userId: string, category: string, action: GoalAction) => void) {
    this.connection.offReducer("update_goal", callback);
  }

}

export class SetReducerFlags {
  addPointsFlags: __CallReducerFlags = 'FullUpdate';
  addPoints(flags: __CallReducerFlags) {
    this.addPointsFlags = flags;
  }

  addTimeFlags: __CallReducerFlags = 'FullUpdate';
  addTime(flags: __CallReducerFlags) {
    this.addTimeFlags = flags;
  }

  clientConnectedFlags: __CallReducerFlags = 'FullUpdate';
  clientConnected(flags: __CallReducerFlags) {
    this.clientConnectedFlags = flags;
  }

  updateGoalFlags: __CallReducerFlags = 'FullUpdate';
  updateGoal(flags: __CallReducerFlags) {
    this.updateGoalFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get presence(): PresenceTableHandle {
    // clientCache is a private property
    return new PresenceTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Presence>(REMOTE_MODULE.tables.presence));
  }

  get user(): UserTableHandle {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
